<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>umstek blog</title>
        <link>/</link>
        <description>Some bizarre ideas</description>
        <lastBuildDate>Sun, 05 May 2019 03:48:47 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Hello, world]]></title>
            <link>/posts/2016-09-03/hello-world/</link>
            <guid>/posts/2016-09-03/hello-world/</guid>
            <pubDate>Sat, 03 Sep 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>Iâ€™m only trying to say hello.
Well, here we go. :trollface:</p><p>Python:</p><pre><code class="language-python" data-language="python" data-highlighted-line-numbers=""><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span>
</code></pre><p>Ruby:</p><pre><code class="language-ruby" data-language="ruby" data-highlighted-line-numbers="">puts <span class="token string">"Hello, world!"</span>
</code></pre><p>PHP:</p><pre><code class="language-php" data-language="php" data-highlighted-line-numbers=""><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hello, world!"</span><span class="token punctuation">;</span>
</code></pre><p>Java:</p><pre><code class="language-java" data-language="java" data-highlighted-line-numbers=""><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>VB.net:</p><pre><code class="language-vbnet" data-language="vbnet" data-highlighted-line-numbers=""><span class="token keyword">Module</span> Main
  <span class="token keyword">Sub</span> Main<span class="token punctuation">(</span>args <span class="token keyword">as</span> <span class="token keyword">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span>
  <span class="token keyword">End</span> <span class="token keyword">Sub</span>
<span class="token keyword">End</span> <span class="token keyword">Module</span>
</code></pre><p>C#:</p><pre><code class="language-csharp" data-language="csharp" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token class-name">STAThread</span><span class="token punctuation">]</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>JavaScript:</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers="">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Text cases in programming]]></title>
            <link>/posts/2017-01-16/text-cases/</link>
            <guid>/posts/2017-01-16/text-cases/</guid>
            <pubDate>Mon, 16 Jan 2017 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>When coding, text cases become an important factor if you want to maintain your code up to a high standard, following best practices. Different languages follow different naming conventions for variables, constants etc. Here we discuss some of the different types of text casing and their usages in some popular languages.</p><h2 id="camel-case">Camel Case</h2><p>Spaces are omitted and first letter of each word is capitalized. Looks like a camel with many humps. Other names: <em>Pascal Case</em>, <em>Bumpy Caps</em>, <em>Upper Camel Case</em>.<br/>e.g.: <code>CreateCatDetailsPage</code>, <code>GiveMeAHug</code>, <code>XmlHttpRequest</code> <em>(Note how popular abbreviations are converted.)</em><br/><strong>C#/VB <em>(VB is case insensitive)</em> method names</strong></p><h2 id="headless-camel-case">Headless Camel Case</h2><p>Spaces are omitted and first letter of each word except the first word is capitalized. As implied by the name, looks like a camel without its head.<br/>e.g.: <code>getCatDetails</code>, <code>giveMeAHug</code><br/><strong>Java method and variable names</strong></p><h2 id="snake-case">Snake Case</h2><p>Looks like snakes, with the words of phrases are separated with undescores (<code>_</code>) rather than spaces.<br/>e.g.: <code>get_snake_details</code>, <code>give_me_a_hug</code><br/><strong>Python/Ruby function and variable names</strong></p><h2 id="screaming-snake-case">Screaming Snake Case</h2><p>Screaming most of the time means making all the text uppercase. This case is the same as snake case except that all letters are capitalized.<br/>e.g.: <code>SNAKE_SPEED_FACTOR</code>, <code>MAX_SNAKE_AGE</code><br/><strong>In most programming languages, constants are named using screaming snake case.</strong></p><h2 id="kebab-case--lisp-case">Kebab Case / Lisp Case</h2><p>This one does not have a standard name but called with names like <em>Caterpillar Case</em>, <em>Spine Case</em>, or <em>Hyphenated</em>.<br/>e.g.: <code>max-time-limit</code>, <code>font-family</code><br/><strong>CSS, Lisp</strong></p><h2 id="train-case">Train Case</h2><p>This one is the same as the above, but first letters of all words are capitalized.<br/>e.g.: <code>Train-Case</code></p><h2 id="cobol-case">COBOL Case</h2><p>Looks more like a screaming Lisp case. Hyphenated words with all caps.<br/>e.g.: <code>MAGIC-NUMBER</code><br/><strong>COBOL</strong></p><h2 id="studly-caps">Studly Caps</h2><p>Uppercase letters and lowercase letters are mixed. Iâ€™m curious whether this is used in any kind of programming.<br/>e.g.: <code>StUdLyCaPs</code></p><hr/><p>If you know of more, or if you want to add anything, need clarifications, please comment below. ðŸ˜„</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Funny names for Wi-Fi router]]></title>
            <link>/posts/2017-04-17/funny-wifi-router-names/</link>
            <guid>/posts/2017-04-17/funny-wifi-router-names/</guid>
            <pubDate>Mon, 17 Apr 2017 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><ol><li>Coffee machines network</li><li>Google Loon</li><li>SUPREMESAT-1</li><li>Mom Use This One</li><li>AREA-51 Public Wi-Fi</li><li>FBI Surveillance Van 3</li><li>White Van Transport</li><li>Public Wi-Fi</li><li>Hidden Network</li><li>Internet Unavailable</li><li>Martin Router King</li><li>Unidentified Network</li><li>Infected Network</li><li>Loadingâ€¦</li><li>Cannot connect</li></ol></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[My React+Markdown blog journey (Part 1)]]></title>
            <link>/posts/2019-01-16/my-blog-journey/</link>
            <guid>/posts/2019-01-16/my-blog-journey/</guid>
            <pubDate>Wed, 16 Jan 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>I had the idea of creating a blog since at least 2010. In fact, I <strong>did</strong> create
several blogs (<a href="https://umstek.wordpress.com/">https://umstek.wordpress.com/</a>, <a href="http://www.umstek.co.vu/">http://www.umstek.co.vu/</a>,
<a href="https://bunnydebugs.wordpress.com/">https://bunnydebugs.wordpress.com/</a>) and some of them even had custom domains,
I got <a href="https://codotvu.co/" title="co.vu">for</a> <a href="https://www.freenom.com/en/index.html?lang=en" title="Freenom">free</a>. After becoming
more of a programmer than a multimedia guy, I decided that I needed a custom
blogâ€Šâ€”â€Šor a website.</p><p>Since my focus was a <em>static</em> blog, that also had few custom pages to showcase
what I have developed, I decided to go with <a href="https://jekyllrb.com/">Jekyll</a>
on <a href="https://pages.github.com/">GitHub pages</a>. Selecting GitHub pages as the
hosting space is the best matching choice because of several reasons. I only
need to add a file to the remote repository hosted on git, with virtually
unlimited space, to <a href="https://travis-ci.org/" title="Travis-CI">trigger a build</a> and
update my blog. I can even use GitHubâ€™s web UI to write a post! As far as the
limitations are concerned, I didnâ€™t need any database connectivity or use of
any APIs that needed authentication.</p><p>Jekyll, on the other hand, was the preferred choice with GitHub pages, although
now you can just add some HTML pages or Markdown and configure GitHub Pages
with a theme to build a site instantly. Even if I could do that at the time, I
needed the ability to customize my website. My relationship with Jekyll was
fine initially as it was already familiar to me with the
<a href="https://shopify.github.io/liquid/">liquid template engine</a>, which is used to
generate HTML pages (you need pages other than markdown posts, and navigation
etc.)â€Šâ€”â€ŠI had used <a href="https://symfony.com/">Symfony</a> (v2 and v3) which was (is?)
a popular <a href="https://secure.php.net/manual/en/intro-whatis.php">PHP</a> web
framework with a template language called <a href="https://twig.symfony.com/">twig</a>,
which is similar to liquid. But it became uncomfortable when I had to touch
<a href="https://www.ruby-lang.org/en/">Ruby</a> to get some things done. Jekyll also had
some problems with Windows and I had problems with Linux.</p><p>Anyway, I didnâ€™t have much time to write posts, as I was busy with academic
work and other work, such as finding the perfect blog platform rather than
writing blogs on what is available.</p><p>I donâ€™t remember when I decided that I needed a new blog site but should be
around January 2017. But I know why I wanted a new site:
<a href="https://reactjs.org/">React</a> was beginning to be the de-facto view library and
<a href="https://nodejs.org/en/">NodeJS</a> was already popular. I accidentally learned
React and was obsessed with it.</p><p>So, I needed to write posts in
<a href="https://en.wikipedia.org/wiki/Markdown">markdown</a>, other pages and the site in
React, and to have the site
<a href="https://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a> ready. Since I
was still going to host the site on GitHub pages,
<a href="https://alligator.io/react/server-side-rendering/">SSR</a> was not possible
(and not needed, since the content was static) because there was no server.
But, if I can get the rendered HTML once per change, it was what I needed.
After researching, I found <a href="https://www.gatsbyjs.org/">GatsbyJS</a>, which matched
all of my obsessions.</p><p>GatsbyJS is an entire ecosystem which lets you create static
<a href="https://developers.google.com/web/progressive-web-apps/">progressive web apps</a>
with state-of-the-art tools like React, <a href="https://graphql.org/">GraphQL</a>,
Markup(down) together with APIs that brings data to the site. Everything is
built before publishing on your preferred platform (gh-pages,
<a href="https://www.netlify.com/">netlify</a>, <a href="https://zeit.co/now">now.sh</a> etc.) so
itâ€™s plain ol&#x27; HTML with additional CSS/JS and other assets. I used the
gatsby-advanced-starter boilerplate and itâ€™s even configured with more plugins
such as image compression, tags, SEO and
<a href="https://analytics.google.com/analytics/web/">Google Analytics</a>. I added the
magnificent <a href="https://v1.grommet.io/">Grommet UI</a> kit from hp (?) and was good to
go.</p><p>Of course, the journey didnâ€™t end there.</p></div>]]></content:encoded>
        </item>
    </channel>
</rss>
{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/PostsList/index.tsx","webpack:///./src/components/DateDisplay/index.tsx"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","BlogIndex","data","location","siteTitle","posts","allMdx","nodes","length","style","listStyle","PostsList","map","post","frontmatter","fields","slug","key","className","itemScope","itemType","itemProp","href","date","tags","link","excerpt","filter","c","join"],"mappings":"2FAAA,iDAYMA,EAAM,SAAC,GAAuC,UAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAASC,yBAAe,cAAxBD,KAgBFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAExC,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdR,QAEFE,MAAOA,EACPO,cAAeF,EAAe,QAAQA,EAAiB,KACvDN,KAAM,CACJ,CACES,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAAST,GAEX,CACEU,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAM,gBACNC,QAAST,GAEX,CACEQ,KAAM,sBACNC,QAASN,IAEXU,OAAOd,MAKfH,EAAIkB,aAAe,CACjBhB,KAAM,KACNC,KAAM,GACNF,YAAa,IAUAD,O,kCC1Ff,oEAkCemB,UA3BG,SAAC,GAAuB,MAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKf,KAAKG,oBAAV,eAAwBJ,QAAxB,QACZmB,EAAQH,EAAKI,OAAOC,MAE1B,OAAqB,IAAjBF,EAAMG,OAEN,kBAAC,IAAD,CAAQL,SAAUA,EAAUjB,MAAOkB,GACjC,kBAAC,IAAD,CAAKlB,MAAM,cACX,yLAUJ,kBAAC,IAAD,CAAQiB,SAAUA,EAAUjB,MAAOkB,GACjC,kBAAC,IAAD,CAAKlB,MAAM,cACX,wBAAIuB,MAAO,CAAEC,UAAW,SACtB,kBAAC,IAAD,CAAWL,MAAOA,Q,wGC2BXM,IAjDG,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAH,OAChB,oCACGA,EAAMO,KAAI,SAACC,GACV,IAAM3B,EAAQ2B,EAAKC,YAAY5B,OAAS2B,EAAKE,OAAOC,KAEpD,OACE,wBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,6BACEE,UAAU,0BACVC,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIC,SAAS,YACX,yBAAKH,UAAU,sCACb,uBACEA,UAAU,0CACVI,KAAI,SAAWT,EAAKE,OAAOC,MAE1B9B,KAIP,yBAAKgC,UAAU,kDACb,kBAAC,IAAD,CAAaA,UAAU,OAAOK,KAAMV,EAAKC,YAAYS,QACnDV,EAAKC,YAAYU,MAAQ,IAAIZ,KAAI,SAAClB,GAAD,OACjC,kBAAC,IAAD,CACEuB,IAAKvB,EACLA,KAAMA,EACN+B,KAAI,SAAW,IAAU/B,GAArB,WAKZ,6BACE2B,SAAS,cACTH,UAAU,6CAEV,uBAAGG,SAAS,eACTR,EAAKC,YAAY/B,aAAe8B,EAAKa,kB,kCC7CtD,yBAEe,oBAAGH,EAAH,EAAGA,KAAML,EAAT,EAASA,UAAT,OACb,uBACEA,UAAW,CAAC,sCAAuCA,GAChDS,QAAO,SAACC,GAAD,QAASA,KAChBC,KAAK,MAEPN","file":"component---src-pages-index-tsx-b26460628846fb64fc48.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport PostsList from \"../components/PostsList\";\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const posts = data.allMdx.nodes;\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <ol style={{ listStyle: `none` }}>\n        <PostsList posts={posts} />\n      </ol>\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          tags\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { kebabCase } from \"lodash\";\n\nimport DateDisplay from \"../DateDisplay\";\nimport Tag from \"../Tag\";\n\nconst PostsList = ({ posts }) => (\n  <>\n    {posts.map((post) => {\n      const title = post.frontmatter.title || post.fields.slug;\n\n      return (\n        <li key={post.fields.slug}>\n          <article\n            className=\"container mx-auto mt-16\"\n            itemScope\n            itemType=\"http://schema.org/Article\" // TechArticle, NewsArticle, BlogPosting\n          >\n            <header>\n              <h1 itemProp=\"headline\">\n                <div className=\"text-3xl text-center text-gray-700\">\n                  <a\n                    className=\"px-2 hover:bg-gray-700 hover:text-white\"\n                    href={`/posts${post.fields.slug}`}\n                  >\n                    {title}\n                  </a>\n                </div>\n              </h1>\n              <div className=\"mt-2 flex flex-row justify-center items-center\">\n                <DateDisplay className=\"mr-4\" date={post.frontmatter.date} />\n                {(post.frontmatter.tags || []).map((name) => (\n                  <Tag\n                    key={name}\n                    name={name}\n                    link={`/tags/${kebabCase(name)}/`}\n                  />\n                ))}\n              </div>\n            </header>\n            <section\n              itemProp=\"articleBody\"\n              className=\"mx-auto mt-2 prose prose-blue lg:prose-lg\"\n            >\n              <p itemProp=\"description\">\n                {post.frontmatter.description || post.excerpt}\n              </p>\n            </section>\n          </article>\n        </li>\n      );\n    })}\n  </>\n);\n\nexport default PostsList;\n","import React from \"react\";\n\nexport default ({ date, className }: { date: string; className?: string }) => (\n  <p\n    className={[\"text-center uppercase text-gray-600\", className]\n      .filter((c) => !!c)\n      .join(\" \")}\n  >\n    {date}\n  </p>\n);\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/components/layout.tsx","webpack:///./src/templates/posts-by-tag.tsx","webpack:///./src/components/PostsList/index.tsx","webpack:///./src/components/DateDisplay/index.tsx"],"names":["Layout","header","location","title","children","isRootPath","pathname","className","to","data-is-root-path","Tags","pageContext","data","tag","allMdx","posts","nodes","totalCount","tagHeader","style","listStyle","PostsList","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","href","date","tags","name","link","description","excerpt","filter","c","join"],"mappings":"6FAAA,qCAqCeA,IAjCA,SAAC,GAAkC,IAG5CC,EAHYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADQ,MACKH,EAASI,SAiB5B,OAbEL,EADEI,EAEA,wBAAIE,UAAU,gBACZ,kBAAC,OAAD,CAAMC,GAAG,KAAKL,IAKhB,kBAAC,OAAD,CAAMI,UAAU,mBAAmBC,GAAG,KACnCL,GAML,yBAAKI,UAAU,iBAAiBE,oBAAmBJ,GACjD,4BAAQE,UAAU,oDACfN,GAEH,8BAAOG,GACP,oC,2HCLSM,UAjBF,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAEDD,EAAKE,OAA3BC,EAFuB,EAE9BC,MAAcC,EAFgB,EAEhBA,WAChBC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEJ,EAFF,IAIf,OACE,kBAAC,IAAD,CAAQX,SAAQ,SAAW,IAAUW,GAArB,IAA8BV,MAAOe,GACnD,wBAAIC,MAAO,CAAEC,UAAW,SACtB,kBAAC,IAAD,CAAWL,MAAOA,KAEpB,kBAAC,OAAD,CAAMP,GAAG,SAAT,e,wGCoCSa,IAjDG,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAH,OAChB,oCACGA,EAAMO,KAAI,SAACC,GACV,IAAMpB,EAAQoB,EAAKC,YAAYrB,OAASoB,EAAKE,OAAOC,KAEpD,OACE,wBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,6BACEnB,UAAU,0BACVqB,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIC,SAAS,YACX,yBAAKvB,UAAU,sCACb,uBACEA,UAAU,0CACVwB,KAAI,SAAWR,EAAKE,OAAOC,MAE1BvB,KAIP,yBAAKI,UAAU,kDACb,kBAAC,IAAD,CAAaA,UAAU,OAAOyB,KAAMT,EAAKC,YAAYQ,QACnDT,EAAKC,YAAYS,MAAQ,IAAIX,KAAI,SAACY,GAAD,OACjC,kBAAC,IAAD,CACEP,IAAKO,EACLA,KAAMA,EACNC,KAAI,SAAW,IAAUD,GAArB,WAKZ,6BACEJ,SAAS,cACTvB,UAAU,6CAEV,uBAAGuB,SAAS,eACTP,EAAKC,YAAYY,aAAeb,EAAKc,kB,kCC7CtD,yBAEe,oBAAGL,EAAH,EAAGA,KAAMzB,EAAT,EAASA,UAAT,OACb,uBACEA,UAAW,CAAC,sCAAuCA,GAChD+B,QAAO,SAACC,GAAD,QAASA,KAChBC,KAAK,MAEPR","file":"component---src-templates-posts-by-tag-tsx-3c01ddac37b1380d23ca.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport Bio from \"./bio\";\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n  let header;\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    );\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    );\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"glass opacity-70 shadow-md p-4 z-50 sticky top-0\">\n        {header}\n      </header>\n      <main>{children}</main>\n      <footer>\n        {/* <Bio /> */}\n        {/* <a href=\"#\">Disclaimer</a> */}\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { kebabCase } from \"lodash\";\n\nimport Layout from \"../components/layout\";\nimport PostsList from \"../components/PostsList\";\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { nodes: posts, totalCount } = data.allMdx;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`;\n\n  return (\n    <Layout location={`/tags/${kebabCase(tag)}/`} title={tagHeader}>\n      <ol style={{ listStyle: `none` }}>\n        <PostsList posts={posts} />\n      </ol>\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { kebabCase } from \"lodash\";\n\nimport DateDisplay from \"../DateDisplay\";\nimport Tag from \"../Tag\";\n\nconst PostsList = ({ posts }) => (\n  <>\n    {posts.map((post) => {\n      const title = post.frontmatter.title || post.fields.slug;\n\n      return (\n        <li key={post.fields.slug}>\n          <article\n            className=\"container mx-auto mt-16\"\n            itemScope\n            itemType=\"http://schema.org/Article\" // TechArticle, NewsArticle, BlogPosting\n          >\n            <header>\n              <h1 itemProp=\"headline\">\n                <div className=\"text-3xl text-center text-gray-700\">\n                  <a\n                    className=\"px-2 hover:bg-gray-700 hover:text-white\"\n                    href={`/posts${post.fields.slug}`}\n                  >\n                    {title}\n                  </a>\n                </div>\n              </h1>\n              <div className=\"mt-2 flex flex-row justify-center items-center\">\n                <DateDisplay className=\"mr-4\" date={post.frontmatter.date} />\n                {(post.frontmatter.tags || []).map((name) => (\n                  <Tag\n                    key={name}\n                    name={name}\n                    link={`/tags/${kebabCase(name)}/`}\n                  />\n                ))}\n              </div>\n            </header>\n            <section\n              itemProp=\"articleBody\"\n              className=\"mx-auto mt-2 prose prose-blue lg:prose-lg\"\n            >\n              <p itemProp=\"description\">\n                {post.frontmatter.description || post.excerpt}\n              </p>\n            </section>\n          </article>\n        </li>\n      );\n    })}\n  </>\n);\n\nexport default PostsList;\n","import React from \"react\";\n\nexport default ({ date, className }: { date: string; className?: string }) => (\n  <p\n    className={[\"text-center uppercase text-gray-600\", className]\n      .filter((c) => !!c)\n      .join(\" \")}\n  >\n    {date}\n  </p>\n);\n"],"sourceRoot":""}